#!/bin/bash

#-----------------------|DOCUMENTATION|-----------------------#
# @descr: Script for creation the documentation for "New Model Packer". 
# @fonts: 
# @example:
#       bash create-documentation-packer.sh \
#   		                  --source-file="./packer-new-model/coreos-all-platforms.json" \
#                             --output-file="./packer-builds/.../coreos-vagrant-template.json" \
#                             --new-model-build-path="./packer-builds/coreos-vagrant-packer" \
#   		                  --packer-modules="./packer-modules";
#-------------------------------------------------------------#

# @fonts: https://www.digitalocean.com/community/tutorials/using-grep-regular-expressions-to-search-for-text-patterns-in-linux
# @example:
#    $ util.getParameterValue "(--param3=|-p3=)" "$@"
function util.getParameterValue(){
    local exp=$1;
    local params=("$@");
    local valueEnd="";
    for value in "${params[@]:1:$#}"; do
        if grep -E -q "${exp}" <<< "${value}"; then
            valueEnd="${value#*=}";
            break;
        fi        
    done
    echo $valueEnd;
}

# @descr: Main function of the script, it runs automatically on the script call.
# @param: 
#    $@ | array: (*)
function StartCompilation {
    local new_mode_source_file=$(util.getParameterValue "(--new-model-source-file=)" "$@");  
    local new_mode_output_file=$(util.getParameterValue "(--new-model-output-file=)" "$@");  
    local new_mode_build_path=$(util.getParameterValue "(--new-model-build-path=)" "$@");  
    local packer_modules=$(util.getParameterValue "(--packer-modules=)" "$@");  
    
    local packer_template=$(cat "${new_mode_source_file}" | jq -c ".packer_template"); 

    local compiled_template_name=$(basename "${new_mode_output_file}");  
    compiled_template_name="${compiled_template_name%.*}";

    local compiled_template_path=$(dirname "${new_mode_output_file}");
   
    echo -e "\nStarting script execution [create-documentation-packer.sh]";

    echo "Starting the creation of the README.md documentation file...";  
    echo "--generated file: '${new_mode_build_path}/README.md'"; 
    touch "${new_mode_build_path}/README.md"
    {
        echo -e '## Project generated through [coreos-packer](https://github.com/alisonbuss/coreos-packer/).';

        echo -e '# Documentation:';

        echo -e '## [Packer Modules] used to generate the Packer Template.';
        echo -e '##### Directory of Packer Modules: "'${packer_modules}'"';
        echo -e '```text';
        tree -d "${packer_modules}"; echo "";
        echo -e '```';
        echo -e ' ';

        echo -e '## New Model for Packer.';
        echo -e '##### '${new_mode_source_file}' ';
        echo -e '```bash';
        cat "${new_mode_source_file}"; echo "";
        echo -e '```';
        echo -e ' ';

        echo -e '## Files generated by the New Model Packer.';
        echo -e '```text';
        tree "${new_mode_build_path}"; echo "";
        echo -e '```';
        echo -e ' ';

        echo -e '## Custom Variables of the New Model Packer:';
        echo -e '#### vars-custom-variables.json';
        echo -e '##### '${compiled_template_path}'/vars-custom-variables.json';
        echo -e '```json';
        jq . "${compiled_template_path}/vars-custom-variables.json";
        echo -e '```';
        echo -e ' ';

        echo -e '## List Variables of the New Model Packer:';
        for variableJSON in $(echo "${packer_template}" | jq -r '.list_variables[]'); do
            echo -e '##### '${packer_modules}${variableJSON}' ';
            echo -e '```json';
            cat "${packer_modules}${variableJSON}"; echo "";
            echo -e '```';
            echo -e ' ';
        done 
        echo -e ' ';
       
        echo -e '## Builders of the New Model Packer:';
        for builderJSON in $(echo "${packer_template}" | jq -r '.builders[]'); do
            echo -e '##### '${packer_modules}${builderJSON}' ';
            echo -e '```json';
            cat "${packer_modules}${builderJSON}"; echo "";
            echo -e '```';
            echo -e ' ';
        done 
        echo -e ' ';

        echo -e '## Provisioners of the New Model Packer:';
        for provisionerJSON in $(echo "${packer_template}" | jq -r '.provisioners[]'); do
            echo -e '##### '${packer_modules}${provisionerJSON}' ';
            echo -e '```json';
            cat "${packer_modules}${provisionerJSON}"; echo "";
            echo -e '```';
            echo -e ' ';
        done 
        echo -e ' ';

        echo -e '## Post-Processors of the New Model Packer:';
        for post_processorJSON in $(echo "${packer_template}" | jq -r '.post_processors[]'); do
            echo -e '##### '${packer_modules}${post_processorJSON}' ';
            echo -e '```json';
            cat "${packer_modules}${post_processorJSON}"; echo "";
            echo -e '```';
            echo -e ' ';
        done
        echo -e ' ';

        echo -e '## Packer Template generated through the New Model Packer:';
        echo -e '#### '${compiled_template_name}'.json';
        echo -e '##### '${compiled_template_path}'/'${compiled_template_name}'.json';
        echo -e '```json';
        cat "${compiled_template_path}/${compiled_template_name}.json"; echo "";
        echo -e '```';
        echo -e ' ';
        
        echo -e '## Execution script Packer CLI, generated through the New Model Packer:';
        echo -e '#### start-packer.sh';
        echo -e '##### '${new_mode_build_path}'/start-packer.sh';
        echo -e '```bash';
        cat "${new_mode_build_path}/start-packer.sh"; echo "";
        echo -e '```';
        echo -e ' ';

    } > "${new_mode_build_path}/README.md";

} 

# @descr: Call of execution of the script's main function.
StartCompilation "$@";

# @descr: Finishing the script!!! :P
exit 0;