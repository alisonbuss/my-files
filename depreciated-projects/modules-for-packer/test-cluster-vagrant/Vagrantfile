# encoding: utf-8
# -*- mode: ruby -*-
# vi: set ft=ruby :
INSTANCES = 2
$DISCOVERY = "The discovery token will be automatically generated."
VAGRANTFILE_API_VERSION = "2"
Vagrant.require_version ">= 1.6.0"
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config| 
    # Generating the "discovery token" of cluster ----------------------------------------
    if ARGV[0].eql?('up') || ARGV[0].eql?('reload')
        require "open-uri"
        $DISCOVERY = open("https://discovery.etcd.io/new?size=#{INSTANCES}").read
        puts "RUN: automatically replace the discovery token on 'vagrant up' or 'vagrant reload'"
        puts "==> generate a new discovery token for cluster, example: 'https://discovery.etcd.io/new?size=#{INSTANCES}'"
        puts "==> discovery token: '#{$DISCOVERY}'"
    end
    # Initiating virtual cluster configuration -------------------------------------------
    (1..INSTANCES).each do |i|
        # define host name and domain ----------------------------------------------------
        _hostname = "coreos-#{i}"
        _domain   = "#{_hostname}.dev.com"
        # define default values ----------------------------------------------------------
        _private_ip = "192.168.33.10#{i}"
        _provisioner_path = "provisioners/shell-script"
        # starting the configuration of the virtual machine ------------------------------
        config.vm.define _domain do |subconfig|
            subconfig.vm.hostname = _hostname
            # define box -----------------------------------------------------------------
            subconfig.vm.box = "lucifer/coreos-vagrant"
            # define access --------------------------------------------------------------
            # This sets the username that Vagrant will SSH as by default.
            # --> default: (config.ssh.username = "vagrant") 
            # --> default: (config.ssh.password = "vagrant") 
            # Always use Vagrants insecure key.
            subconfig.ssh.insert_key = false
            # Forward ssh agent to easily ssh into the different machines.
            subconfig.ssh.forward_agent = true   
            # provider virtualbox --------------------------------------------------------
            subconfig.vm.provider "virtualbox" do |virtualbox|
                virtualbox.name = "vm-" + _hostname
                virtualbox.gui = false
                virtualbox.cpus = 2
                virtualbox.memory = 2048
                virtualbox.functional_vboxsf = false
                virtualbox.check_guest_additions = false
                virtualbox.customize ["modifyvm", :id, "--cpuexecutioncap", "100"]
            end
            # provider network -----------------------------------------------------------
            subconfig.vm.network "private_network", ip: "#{_private_ip}", auto_config: false
            # Enable port forwarding from guest(s) to host machine, auto correction is enabled by default.
            subconfig.vm.network "forwarded_port", guest: 80, host: 8080, auto_correct: true
            # Enable port forwarding of Docker TCP socket
            # Set to the TCP port you want exposed on the *host* machine, default is 2375
            # If 2375 is used, Vagrant will auto-increment (e.g. in the case of INSTANCES > 1)
            # You can then use the docker tool locally by setting the following env var:
            #   export DOCKER_HOST='tcp://127.0.0.1:2375'
            subconfig.vm.network "forwarded_port", guest: 2375, host: (2374 + i), auto_correct: true, host_ip: "127.0.0.1"
            # provider base system -------------------------------------------------------
            _provide_base_path = "#{_provisioner_path}/provide-base-system"
            subconfig.vm.provision "shell", path: "#{_provide_base_path}/config-network.sh", args: ["#{_private_ip}"]
            subconfig.vm.provision "shell", path: "#{_provide_base_path}/config-storage-unit.sh"
            subconfig.vm.provision "shell", path: "#{_provide_base_path}/config-cfssl.sh"
            subconfig.vm.provision "shell", path: "#{_provide_base_path}/config-docker.sh"
            subconfig.vm.provision "shell", path: "#{_provide_base_path}/config-etcd.sh", args: ["#{_hostname}", "#{_private_ip}", "#{$DISCOVERY}"]
            subconfig.vm.provision "shell", path: "#{_provide_base_path}/config-flannel.sh"
            subconfig.vm.provision "shell", path: "#{_provide_base_path}/config-kubernetes.sh"
            subconfig.vm.provision "shell", path: "#{_provide_base_path}/config-security.sh"
            # provider services ----------------------------------------------------------
            _provide_services_path = "#{_provisioner_path}/provide-services"
            #subconfig.vm.provision "shell", path: "#{_provide_services_path}/config-graylog.sh"
            #subconfig.vm.provision "shell", path: "#{_provide_services_path}/config-netdata.sh"
            #subconfig.vm.provision "shell", path: "#{_provide_services_path}/config-prometheus.sh"
            #subconfig.vm.provision "shell", path: "#{_provide_services_path}/config-grafana.sh"
            #subconfig.vm.provision "shell", path: "#{_provide_services_path}/config-konga.sh"
            #subconfig.vm.provision "shell", path: "#{_provide_services_path}/config-jenkins.sh"
            #subconfig.vm.provision "shell", path: "#{_provide_services_path}/config-rocket-chat.sh"
            # provider business ----------------------------------------------------------
            _provide_business_path = "#{_provisioner_path}/provide-business"
            #subconfig.vm.provision "shell", path: "#{_provide_business_path}/config-wp-db.sh"
            #subconfig.vm.provision "shell", path: "#{_provide_business_path}/config-wp-admin.sh"
            #subconfig.vm.provision "shell", path: "#{_provide_business_path}/config-wp-theme-x.sh"
            #subconfig.vm.provision "shell", path: "#{_provide_business_path}/config-wp-mysite.sh"
            # restarting the system ------------------------------------------------------
            subconfig.vm.provision "shell", inline: "echo 'Restarting the system in 9 seconds...'; (sleep 9s; reboot;) &"
        end
    end
    # plugin conflict
    if Vagrant.has_plugin?("vagrant-vbguest") then
        config.vbguest.auto_update = false
    end
end